name: Android Release Distribution From Github

on:
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      versionName:
        description: 'User-facing release version name'
        required: true
        default: "1.0.0"
      versionCode:
        description: 'versionCode or build number'
        required: true
        default: '1'


jobs:
  unit-tests:
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v3

      - name: Unit tests
        run: ./gradlew test

  release-build:
    needs: [ unit-tests ]
    runs-on: ubuntu-latest

    steps:
      - name: Setup versionName regardless of how this action is triggered
        id: version_name
        run: |
          WORKFLOW_INPUT=${{ github.event.inputs.versionName }}
          VERSION_NAME=${WORKFLOW_INPUT:-"1.0.0"}
          echo "ORG_GRADLE_PROJECT_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Setup versionCode regardless of how this action is triggered
        id: version_code
        run: |
          WORKFLOW_INPUT=${{ github.event.inputs.versionCode }}
          VERSION_CODE=${WORKFLOW_INPUT:-"1"}
          echo "ORG_GRADLE_PROJECT_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew
      - name: Retrieve secrets
        env:
          KEYSTORE_BASE64: ${{ secrets.SIGNING_KEY }}
          KEY_PROPERTIES_BASE64: ${{ secrets.KEY_PROPERTIES }}
        run: |
          echo $KEYSTORE_BASE64 | base64 --decode > app/carbox-delivery-release.keystore
          echo $KEY_PROPERTIES_BASE64 | base64 --decode > key.properties

      - name: Build release APK
        run: ./gradlew --no-daemon assembleRelease

      - name: Upload build file
        uses: actions/upload-artifact@v3
        with:
          name: CarBox_Release
          path: app/build/outputs/apk/release/app-release.apk
      - name: Upload mapping file

        uses: actions/upload-artifact@master
          with:
            name: mapping.txt
            path: app/build/outputs/mapping/release/mapping.txt

  Distribute:
    needs: [ release-build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: CarBox_Release

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: Stakeholders
          file: app-release.apk

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
